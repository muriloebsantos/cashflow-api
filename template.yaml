AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for cashflow-api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    Environment:
      Variables:
        JWT_KEY: !Ref JwtKey
        ENV: !Ref Env
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type, Authorization'"
      AllowOrigin: "'*'"

Parameters:
  ApiName:
    Type: String
  JwtKey:
    Type: String
  Env: 
    Type: String

Resources:
  CashflowApi:
      Type: AWS::Serverless::Api
      Properties:
        Name: !Ref ApiName
        StageName: prod
        Auth:
          AddDefaultAuthorizerToCorsPreflight: false
          DefaultAuthorizer: MyLambdaTokenAuthorizer
          Authorizers:
            MyLambdaTokenAuthorizer:
              FunctionArn: !GetAtt AuthHandlerFunction.Arn

  AuthHandlerFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app
      Handler: ./src/functions/authHandlerFunction.handler
      Runtime: nodejs20.x
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub 
            - 'cashflow_${EnvName}_*'
            - EnvName: !Ref Env
      
  CreateTokenFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app/dist
      Handler: ./functions/createTokenFunction.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub 
            - 'cashflow_${EnvName}_*'
            - EnvName: !Ref Env
      Events:
        ApiGatewayEvent:
          Type: Api 
          Properties:
            Path: /token
            Method: post
            Auth:
              Authorizer: NONE
            RestApiId: !Ref CashflowApi

  GetMeFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app/dist
      Handler: ./functions/getMeFunction.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub 
            - 'cashflow_${EnvName}_*'
            - EnvName: !Ref Env
      Events:
        ApiGatewayEvent:
          Type: Api 
          Properties:
            Path: /me
            Method: get
            RestApiId: !Ref CashflowApi

  GetUsersFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app/dist
      Handler: ./functions/getUsersFunction.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub 
            - 'cashflow_${EnvName}_*'
            - EnvName: !Ref Env
      Events:
        ApiGatewayEvent:
          Type: Api 
          Properties:
            Path: /users
            Method: get
            RestApiId: !Ref CashflowApi

  UpdateActivityFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app/dist
      Handler: ./functions/updateActivityFunction.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub 
            - 'cashflow_${EnvName}_*'
            - EnvName: !Ref Env
      Events:
        ApiGatewayEvent:
          Type: Api 
          Properties:
            Path: /me/activity
            Method: post
            RestApiId: !Ref CashflowApi

  AdjustBalanceFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app/dist
      Handler: ./functions/adjustBalanceFunction.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub 
            - 'cashflow_${EnvName}_*'
            - EnvName: !Ref Env
      Events:
        ApiGatewayEvent:
          Type: Api 
          Properties:
            Path: /me/balance-adjustment
            Method: post
            RestApiId: !Ref CashflowApi

  CreateCreditCardFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app/dist
      Handler: ./functions/createCreditCardFunction.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub 
            - 'cashflow_${EnvName}_*'
            - EnvName: !Ref Env
      Events:
        ApiGatewayEvent:
          Type: Api 
          Properties:
            Path: /credit-cards
            Method: post
            RestApiId: !Ref CashflowApi

  GetCreditCardsFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app/dist
      Handler: ./functions/getCreditCardsFunction.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub 
            - 'cashflow_${EnvName}_*'
            - EnvName: !Ref Env
      Events:
        ApiGatewayEvent:
          Type: Api 
          Properties:
            Path: /credit-cards
            Method: get
            RestApiId: !Ref CashflowApi

  UpdateCreditCardFunction:
      Type: AWS::Serverless::Function 
      Properties:
        CodeUri: app/dist
        Handler: ./functions/updateCreditCardFunction.lambdaHandler
        Runtime: nodejs20.x
        MemorySize: 256
        Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub 
              - 'cashflow_${EnvName}_*'
              - EnvName: !Ref Env
        Events:
          ApiGatewayEvent:
            Type: Api 
            Properties:
              Path: /credit-cards/{id}
              Method: put
              RestApiId: !Ref CashflowApi

  DeleteCreditCardFunction:
      Type: AWS::Serverless::Function 
      Properties:
        CodeUri: app/dist
        Handler: ./functions/deleteCreditCardFunction.lambdaHandler
        Runtime: nodejs20.x
        MemorySize: 256
        Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub 
              - 'cashflow_${EnvName}_*'
              - EnvName: !Ref Env
        Events:
          ApiGatewayEvent:
            Type: Api 
            Properties:
              Path: /credit-cards/{id}
              Method: delete
              RestApiId: !Ref CashflowApi
              
  CreateEntriesFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app/dist
      Handler: ./functions/createEntriesFunction.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub 
            - 'cashflow_${EnvName}_*'
            - EnvName: !Ref Env
      Events:
        ApiGatewayEvent:
          Type: Api 
          Properties:
            Path: /entries
            Method: post
            RestApiId: !Ref CashflowApi

  GetPendingEntriesFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app/dist
      Handler: ./functions/getPendingEntriesFunction.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub 
            - 'cashflow_${EnvName}_*'
            - EnvName: !Ref Env
      Events:
        ApiGatewayEvent:
          Type: Api 
          Properties:
            Path: /entries/pending
            Method: get
            RestApiId: !Ref CashflowApi

  GetEntriesFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app/dist
      Handler: ./functions/getEntriesFunction.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub 
            - 'cashflow_${EnvName}_*'
            - EnvName: !Ref Env
      Events:
        ApiGatewayEvent:
          Type: Api 
          Properties:
            Path: /entries
            Method: get
            RestApiId: !Ref CashflowApi

  CommitEntryFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app/dist
      Handler: ./functions/commitEntryFunction.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub 
            - 'cashflow_${EnvName}_*'
            - EnvName: !Ref Env
      Events:
        ApiGatewayEvent:
          Type: Api 
          Properties:
            Path: /entries/commit
            Method: post
            RestApiId: !Ref CashflowApi

  DeleteEntryFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app/dist
      Handler: ./functions/deleteEntryFunction.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub 
            - 'cashflow_${EnvName}_*'
            - EnvName: !Ref Env
      Events:
        ApiGatewayEvent:
          Type: Api 
          Properties:
            Path: /entries/{id}
            Method: delete
            RestApiId: !Ref CashflowApi

  UpdateEntryFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app/dist
      Handler: ./functions/updateEntryFunction.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub 
            - 'cashflow_${EnvName}_*'
            - EnvName: !Ref Env
      Events:
        ApiGatewayEvent:
          Type: Api 
          Properties:
            Path: /entries/{id}
            Method: put
            RestApiId: !Ref CashflowApi
      
  TestFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app/dist
      Handler: ./functions/testFunction.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Events:
        ApiGatewayEvent:
          Type: Api 
          Properties:
            Path: /test
            Method: get
            RestApiId: !Ref CashflowApi

  CreateUserFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: app/dist
      Handler: ./functions/createUserFunction.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub 
            - 'cashflow_${EnvName}_*'
            - EnvName: !Ref Env
      Events:
        ApiGatewayEvent:
          Type: Api 
          Properties:
            Path: /users
            Method: post
            Auth:
              Authorizer: NONE
            RestApiId: !Ref CashflowApi

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 
        - 'cashflow_${EnvName}_users'
        - EnvName: !Ref Env
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "_id"
          AttributeType: "S"
        - AttributeName: "email"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "_id"
          KeyType: "HASH"
        - AttributeName: "email"
          KeyType: "RANGE"
    